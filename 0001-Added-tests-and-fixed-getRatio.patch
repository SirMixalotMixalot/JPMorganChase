From fdea65732781802013b52ed66dc017b055028c39 Mon Sep 17 00:00:00 2001
From: Bk <bigbk75@gmail.com>
Date: Wed, 24 Mar 2021 16:44:58 +0200
Subject: [PATCH] Added tests and fixed getRatio

---
 client3.py     | 10 +++++++---
 client_test.py | 38 +++++++++++++++++++++++++++++++++-----
 2 files changed, 40 insertions(+), 8 deletions(-)

diff --git a/client3.py b/client3.py
index f1771c3..d29efbd 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price) / 2
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if price_b == 0: # make sure we don't divide by zero
+		return None
+	return (price_a/price_b)
 
 # Main
 if __name__ == "__main__":
@@ -52,8 +54,10 @@ if __name__ == "__main__":
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
 		""" ----------- Update to get the ratio --------------- """
+		prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+			prices[stock] = price 
 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+		print ("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
diff --git a/client_test.py b/client_test.py
index af2bf26..2d64dcb 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint,getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,17 +8,45 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    ask = "top_ask"
+    bid = "top_bid"
+    
+    for item in quotes:
+      expected_price = (item[ask]["price"] + item[bid]["price"]) / 2
+    
+      (_,_,_,price) = getDataPoint(item)
+      self.assertEqual(price,expected_price)
+
+    
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 130.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-
-
+    
+    
+    for item in quotes:
+      (_,bid,ask,_) = getDataPoint(item)
+      self.assertLess(getRatio(ask,bid),1)
+    
+      
   """ ------------ Add more unit tests ------------ """
-
+  def test_getDataPoint_calculatePriceBidLessThanAsk(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 118.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 111.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+    
+    
+    for item in quotes:
+      (_,bid,ask,_) = getDataPoint(item)
+      self.assertGreater(getRatio(ask,bid),1)
+    
+  def test_getRatio_zero(self):
+      self.assertIsNone(getRatio(1,0))
 
 
 if __name__ == '__main__':
-- 
2.30.1.windows.1

